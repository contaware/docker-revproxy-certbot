server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    # Set your domain
    # Note: nginx compares the request's "Host" header field with 
    #       the server_name. If there is no match, or the request 
    #       does not contain this header field at all, then nginx 
    #       will route the request to this first server section.
    server_name app1.example.com;

    # Certificate
    ssl_certificate /etc/nginx/ssl/live/mycerts/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/mycerts/privkey.pem;
    
    # Set your proxied server(s)
    # Note: host.docker.internal points to the docker host,
    #       if it is not working, use the docker host IP.
    location / {
        proxy_pass http://host.docker.internal:8888/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location /res1/ {
        proxy_pass http://host.docker.internal:8880/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    # Set your domain
    server_name app2.example.com;

    # Certificate
    ssl_certificate /etc/nginx/ssl/live/mycerts/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/mycerts/privkey.pem;
    
    # Set your proxied server(s)
    # Note: host.docker.internal points to the docker host,
    #       if it is not working, use the docker host IP.
    location / {
        proxy_pass http://host.docker.internal:8800/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    location /res2/ {
        proxy_pass http://host.docker.internal:8080/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
